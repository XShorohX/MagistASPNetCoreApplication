// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PraktASPApp.Database;

#nullable disable

namespace PraktASPApp.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240624155421_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Corpa4Sem4.Database.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("AccountTypeId");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("CurrentBalance");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OpeningDate");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("AccountType", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.ClientStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("ClientStatuses", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.LegalPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Address");

                    b.Property<string>("BookkeeperFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("BookkeeperFullName");

                    b.Property<int?>("CeoId")
                        .HasColumnType("integer")
                        .HasColumnName("CeoId");

                    b.Property<int?>("OwnershipId")
                        .HasColumnType("integer")
                        .HasColumnName("OwnershipId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("CeoId");

                    b.HasIndex("OwnershipId");

                    b.ToTable("LegalPersons", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("AccountId");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean")
                        .HasColumnName("Closed");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("DebtAmount");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("PaymentDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Loans", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("from_user_id");

                    b.Property<string>("MessageHeadline")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("message_headline");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_text");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("send_date");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("to_user_id");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.NaturalPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Address");

                    b.Property<int?>("InStaffId")
                        .HasColumnType("integer")
                        .HasColumnName("InStaffId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Patronymic");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int?>("SexId")
                        .HasColumnType("integer")
                        .HasColumnName("SexId");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("StatusId");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Surname");

                    b.HasKey("Id");

                    b.HasIndex("InStaffId");

                    b.HasIndex("SexId");

                    b.HasIndex("StatusId");

                    b.ToTable("NaturalPersons", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.Ownership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("Ownerships", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.StaffStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("StaffStatuses", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.Account", b =>
                {
                    b.HasOne("Corpa4Sem4.Database.Models.AccountType", "Type")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_AccountType");

                    b.HasOne("Corpa4Sem4.Database.Models.NaturalPerson", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_NaturalPersons");

                    b.Navigation("Owner");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.LegalPerson", b =>
                {
                    b.HasOne("Corpa4Sem4.Database.Models.NaturalPerson", "Ceo")
                        .WithMany()
                        .HasForeignKey("CeoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_LegalPersons_NaturalPersons_CeoId");

                    b.HasOne("Corpa4Sem4.Database.Models.Ownership", "Ownership")
                        .WithMany()
                        .HasForeignKey("OwnershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_LegalPersons_Ownerships");

                    b.Navigation("Ceo");

                    b.Navigation("Ownership");
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.Loan", b =>
                {
                    b.HasOne("Corpa4Sem4.Database.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Loans_Accounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.Message", b =>
                {
                    b.HasOne("Corpa4Sem4.Database.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Messages_Users_FromUserId");

                    b.HasOne("Corpa4Sem4.Database.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Messages_Users_ToUserId");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Corpa4Sem4.Database.Models.NaturalPerson", b =>
                {
                    b.HasOne("Corpa4Sem4.Database.Models.StaffStatus", "InStaff")
                        .WithMany()
                        .HasForeignKey("InStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_NaturalPersons_StaffStatuses");

                    b.HasOne("Corpa4Sem4.Database.Models.Gender", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_NaturalPersons_Genders");

                    b.HasOne("Corpa4Sem4.Database.Models.ClientStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_NaturalPersons_ClientStatuses");

                    b.Navigation("InStaff");

                    b.Navigation("Sex");

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
